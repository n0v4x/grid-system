{"version":3,"sourceRoot":"","sources":["index.scss"],"names":[],"mappings":"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","file":"index.css","sourcesContent":["@use \"sass:math\";\r\n@import \"./functions/\";\r\n\r\n@function is-valid-gutter($gutter) {\r\n  @return (type-of($gutter) == \"number\" and $gutter != 0);\r\n}\r\n\r\n@mixin gutter($gutter: null) {\r\n  @if (not is-valid-gutter($gutter)) {\r\n    @error \"$gutter in not valid\";\r\n  }\r\n\r\n  $half-gutter: math.div($gutter, 2);\r\n\r\n  padding-left: $half-gutter;\r\n  padding-right: $half-gutter;\r\n}\r\n\r\n@mixin gutter-suppression($gutter: null) {\r\n  @if (not is-valid-gutter($gutter)) {\r\n    @error \"$gutter in not valid\";\r\n  }\r\n\r\n  $n-half-gutter: math.div(-$gutter, 2);\r\n\r\n  margin-right: $n-half-gutter;\r\n  margin-left: $n-half-gutter;\r\n}\r\n\r\n%container {\r\n  width: 100%;\r\n  margin-right: auto;\r\n  margin-left: auto;\r\n}\r\n\r\n%row {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n}\r\n\r\n%col {\r\n  position: relative;\r\n  width: 100%;\r\n}\r\n\r\n@mixin column-width($column-number, $number-of-columns) {\r\n  $width: percentage(math.div($column-number, $number-of-columns));\r\n\r\n  flex: 0 0 $width;\r\n  max-width: $width;\r\n}\r\n\r\n@mixin column-offset($column-number, $number-of-columns) {\r\n  margin-left: if(\r\n    $column-number == 0,\r\n    none,\r\n    percentage(math.div($column-number, $number-of-columns))\r\n  );\r\n}\r\n\r\n@mixin make-column($column-number: null, $number-of-columns: null) {\r\n  position: relative;\r\n  width: 100%;\r\n\r\n  @if ($column-number and $number-of-columns) {\r\n    @include column-width($column-number, $number-of-columns);\r\n  }\r\n}\r\n\r\n@mixin make-container() {\r\n  width: 100%;\r\n  margin-right: auto;\r\n  margin-left: auto;\r\n}\r\n\r\n@mixin make-row() {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n}\r\n\r\n// @mixin make-container($max-width: null, $gutter: null) {\r\n//   .container {\r\n//     @extend %container;\r\n//     max-width: $max-width;\r\n\r\n//     @if (is-valid-gutter(($gutter))) {\r\n//       @include gutter($gutter);\r\n//     }\r\n//   }\r\n// }\r\n\r\n// @mixin make-row($gutter: null) {\r\n//   .row {\r\n//     @extend %row;\r\n\r\n//     @if (is-valid-gutter(($gutter))) {\r\n//       @include gutter-suppression($gutter);\r\n//     }\r\n//   }\r\n// }\r\n\r\n@mixin mobile-first-media($width) {\r\n  @if (strip-unit($width) != 0) {\r\n    @media (max-width: $width) {\r\n      @content;\r\n    }\r\n  } @else {\r\n    @content;\r\n  }\r\n}\r\n\r\n// @include make-container(900px, 30px);\r\n// @include make-row(30px);\r\n\r\n// @function get-breakpoint-class-infix($breakpoint-name, $breakpoint-value) {\r\n//   @return if(\r\n//     $breakpoint-value and $breakpoint-value != 0,\r\n//     \"#{$breakpoint-name}\\\\:\",\r\n//     \"\"\r\n//   );\r\n// }\r\n\r\n$column-class-name: \"col\";\r\n$container-class-name: \"container\";\r\n$row-class-name: \"row\";\r\n\r\n@function get-breakpoint-name($breakpoint-like) {\r\n  @return nth($breakpoint-like, 1);\r\n}\r\n\r\n@function get-breakpoint-value($breakpoint-like) {\r\n  @return if(length($breakpoint-like) == 1, null, nth($breakpoint-like, 2));\r\n}\r\n\r\n@function make-breakpoint-class-infix($breakpoint-name, $breakpoint-value) {\r\n  // $breakpoint-name: get-breakpoint-name($breakpoint-like);\r\n  // $breakpoint-value: get-breakpoint-value($breakpoint-like);\r\n  $breakpoint-class-infix: if(\r\n    $breakpoint-value and $breakpoint-value != 0,\r\n    \"#{$breakpoint-name}\\\\:\",\r\n    \"\"\r\n  );\r\n\r\n  @return $breakpoint-class-infix;\r\n}\r\n\r\n@function get-breakpoints-without-zero-value-breakpoint($breakpoints) {\r\n  $zero-value-breakpoint: nth($breakpoints, 1);\r\n\r\n  @if (nth($zero-value-breakpoint, 2) != 0) {\r\n    @error \"Zero value breakpoint should be first instead of \\\"#{$zero-value-breakpoint}\\\"\";\r\n  }\r\n\r\n  $result: map-remove($breakpoints, nth($zero-value-breakpoint, 1));\r\n\r\n  @return $result;\r\n}\r\n\r\n@mixin each-breakpoint($breakpoints) {\r\n  $breakpoints-without-zero-value-breakpoint: get-breakpoints-without-zero-value-breakpoint(\r\n    $breakpoints\r\n  );\r\n\r\n  @each $breakpoint-name,\r\n    $breakpoint-value in $breakpoints-without-zero-value-breakpoint\r\n  {\r\n    $breakpoint-class-infix: make-breakpoint-class-infix(\r\n      $breakpoint-name,\r\n      $breakpoint-value\r\n    );\r\n\r\n    @media (min-width: $breakpoint-value) {\r\n      @content ($breakpoint-class-infix, $breakpoint-name, $breakpoint-value);\r\n    }\r\n  }\r\n}\r\n\r\n// @mixin generate-columns($breakpoints, $number-of-columns) {\r\n//   @include each-breakpoint($breakpoints) using ($breakpoint-class-infix) {\r\n//     &--size-full {\r\n//       flex-basis: 0;\r\n//       flex-grow: 1;\r\n//       max-width: 100%;\r\n//     }\r\n\r\n//     &--size-auto {\r\n//       flex: 0 0 auto;\r\n//       width: auto;\r\n//       max-width: 100%;\r\n//     }\r\n\r\n//     @for $i from 1 through $number-of-columns {\r\n//       &--size-#{$i}\\/#{$number-of-columns} {\r\n//         @include col-width($i, $number-of-columns);\r\n//       }\r\n//     }\r\n//   }\r\n// }\r\n\r\n@function get-breakpoints($config) {\r\n  @return map-get($config, \"breakpoints\");\r\n}\r\n\r\n@function get-container-config($config) {\r\n  @return map-get($config, \"container\");\r\n}\r\n\r\n@mixin generate-columns($number-of-columns) {\r\n  &--size-full {\r\n    flex-basis: 0;\r\n    flex-grow: 1;\r\n    max-width: 100%;\r\n  }\r\n\r\n  &--size-auto {\r\n    flex: 0 0 auto;\r\n    width: auto;\r\n    max-width: 100%;\r\n  }\r\n\r\n  @for $i from 1 through $number-of-columns {\r\n    &--size-#{$i}\\/#{$number-of-columns} {\r\n      @include column-width($i, $number-of-columns);\r\n    }\r\n  }\r\n}\r\n\r\n@mixin generate-columns-orders($number-of-columns) {\r\n  &--order-first {\r\n    order: -1;\r\n  }\r\n\r\n  &--order-last {\r\n    order: $number-of-columns + 1;\r\n  }\r\n\r\n  @for $i from 1 through $number-of-columns {\r\n    &--order-#{$i} {\r\n      order: $i;\r\n    }\r\n  }\r\n}\r\n\r\n@mixin generate-columns-offsets($number-of-columns) {\r\n  &--offset-none {\r\n    @include column-offset(0, 0);\r\n  }\r\n\r\n  @for $i from 1 through $number-of-columns - 1 {\r\n    &--offset-#{$i}\\/#{$number-of-columns} {\r\n      @include column-offset($i, $number-of-columns);\r\n    }\r\n  }\r\n}\r\n\r\n@mixin generate-containers($containers) {\r\n  &--size-full {\r\n    max-width: none;\r\n  }\r\n\r\n  @each $container-name, $container-max-width in $containers {\r\n    &--size-#{$container-name} {\r\n      max-width: $container-max-width;\r\n    }\r\n  }\r\n}\r\n\r\n@mixin generate-base-classes($config) {\r\n  $number-of-columns: map-get($config, \"number-of-columns\");\r\n  $containers: map-get($config, \"containers\");\r\n\r\n  .#{$container-class-name} {\r\n    @include make-container();\r\n    @include generate-containers($containers);\r\n  }\r\n\r\n  .#{$row-class-name} {\r\n    @include make-row();\r\n  }\r\n\r\n  .#{$column-class-name} {\r\n    @include make-column();\r\n    @include generate-columns($number-of-columns);\r\n    @include generate-columns-orders($number-of-columns);\r\n    @include generate-columns-offsets($number-of-columns);\r\n  }\r\n}\r\n\r\n@mixin generate-breakpoints-classes($config) {\r\n  $breakpoints: map-get($config, \"breakpoints\");\r\n  $containers: map-get($config, \"containers\");\r\n  $number-of-columns: map-get($config, \"number-of-columns\");\r\n\r\n  @include each-breakpoint($breakpoints) using\r\n    ($breakpoint-class-infix, $breakpoint-name, $breakpoint-value) {\r\n    .#{$breakpoint-class-infix}#{$container-class-name} {\r\n      @include generate-containers($containers);\r\n    }\r\n\r\n    .#{$breakpoint-class-infix}#{$column-class-name} {\r\n      @include generate-columns($number-of-columns);\r\n      @include generate-columns-orders($number-of-columns);\r\n      @include generate-columns-offsets($number-of-columns);\r\n    }\r\n  }\r\n}\r\n\r\n@mixin generate-grid-system($config) {\r\n  @include generate-base-classes($config);\r\n  @include generate-breakpoints-classes($config);\r\n}\r\n\r\n$grid-system-config: (\r\n  number-of-columns: 12,\r\n  gutter: 30px,\r\n  containers: (\r\n    xs: 300px,\r\n    sm: 540px,\r\n    md: 720px,\r\n    lg: 960px,\r\n    xl: 1140px,\r\n    xxl: 1320px,\r\n  ),\r\n  breakpoints: (\r\n    xs: 0,\r\n    sm: 576px,\r\n    md: 768px,\r\n    lg: 992px,\r\n    xl: 1200px,\r\n    xxl: 1400px,\r\n  ),\r\n  order: true,\r\n  offset: true,\r\n);\r\n\r\n@include generate-grid-system($grid-system-config);\r\n\r\n// $config: (\r\n//   \"\": (\r\n//     columns: 5,\r\n//     gutter: 30px,\r\n//     breakpoints: (\r\n\r\n//     )\r\n//   ),\r\n//   t: (\r\n\r\n//   ),\r\n//   d: (\r\n\r\n//   )\r\n// )\r\n"]}