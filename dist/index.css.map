{"version":3,"sourceRoot":"","sources":["index.scss","mixins/_container.scss","mixins/_gutter.scss","mixins/_row.scss","mixins/_column.scss","mixins/_breakpoint.scss"],"names":[],"mappings":"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","file":"index.css","sourcesContent":["@import \"./config\";\n@import \"./functions/\";\n@import \"./mixins/\";\n\n$breakpoints: (\n  xs: 0,\n  sm: 576px,\n  md: 768px,\n  lg: 992px,\n  xl: 1200px,\n  xxl: 1440px,\n);\n\n$container: (\n  xs: (\n    gutter: 30px,\n  ),\n  md: (\n    gutter: 40px,\n  ),\n  xl: (\n    gutter: 80px,\n  ),\n);\n\n$grid-system-config: (\n  columns: 12,\n  container: $container,\n  breakpoints: $breakpoints,\n);\n\n@mixin generate-grid-system($config) {\n  $breakpoints: map-get($config, \"breakpoints\");\n  $container: map-get($config, \"container\");\n  $columns: map-get($config, \"columns\");\n\n  $zero-value-breakpoint: get-zero-value-breakpoint($breakpoints);\n  $zero-value-breakpoint-name: nth($zero-value-breakpoint, 1);\n\n  $container-config: map-get-if-map(\n    $container,\n    $zero-value-breakpoint-name,\n    $container\n  );\n\n  .#{$container-class-name} {\n    @include make-container();\n    @include make-container-variant($container-config);\n  }\n\n  .#{$row-class-name} {\n    @include make-row();\n  }\n\n  .#{$column-class-name} {\n    @include make-column();\n  }\n\n  @include each-breakpoint($breakpoints) using\n    ($breakpoint-class-infix, $breakpoint-name, $breakpoint-value) {\n    $breakpoint-container-config: map-get-if-map($container, $breakpoint-name);\n\n    @if (\n      $zero-value-breakpoint-name !=\n        $breakpoint-name and\n        $breakpoint-container-config\n    ) {\n      .#{$container-class-name} {\n        @include make-container-variant($breakpoint-container-config);\n      }\n    }\n\n    .#{$breakpoint-class-infix}#{$column-class-name} {\n      @include generate-columns($columns);\n      @include generate-columns-orders($columns);\n      @include generate-columns-offsets($columns);\n    }\n  }\n}\n\n@include generate-grid-system($grid-system-config);\n","@mixin make-container() {\n  width: 100%;\n\n  margin-right: auto;\n  margin-left: auto;\n}\n\n@mixin make-container-variant($config-or-max-width: null) {\n  $config: normalize-container-config($config-or-max-width);\n  $max-width: map-get($config, \"max-width\");\n  $gutter: map-get($config, \"gutter\");\n\n  max-width: $max-width;\n\n  @if ($gutter) {\n    @include make-gutter($gutter);\n  }\n}\n","@mixin make-gutter($gutter: null) {\n  @if (not is-valid-gutter($gutter)) {\n    @error \"$gutter in not valid\";\n  }\n\n  $half-gutter: div($gutter, 2);\n\n  padding-right: $half-gutter;\n  padding-left: $half-gutter;\n}\n","@mixin make-row() {\n  display: flex;\n  flex-wrap: wrap;\n}\n","@mixin make-column-width($column-number, $number-of-columns) {\n  $width: percentage(div($column-number, $number-of-columns));\n\n  flex: 0 0 $width;\n  max-width: $width;\n}\n\n@mixin make-column-offset($column-number, $number-of-columns) {\n  margin-left: if(\n    $column-number == 0,\n    none,\n    percentage(div($column-number, $number-of-columns))\n  );\n}\n\n@mixin make-column-offset-none() {\n  margin-left: none;\n}\n\n@mixin make-column-offset-auto() {\n  margin-left: \"auto\";\n}\n\n@mixin make-column($column-number: null, $number-of-columns: null) {\n  position: relative;\n  width: 100%;\n\n  @if ($column-number and $number-of-columns) {\n    @include make-column-width($column-number, $number-of-columns);\n  }\n}\n\n@mixin generate-columns($number-of-columns) {\n  &--size-fill {\n    flex-basis: 0;\n    flex-grow: 1;\n    max-width: 100%;\n  }\n\n  &--size-auto {\n    flex: 0 0 auto;\n    width: auto;\n    max-width: 100%;\n  }\n\n  @for $i from 1 through $number-of-columns {\n    &--size-#{$i}\\/#{$number-of-columns} {\n      @include make-column-width($i, $number-of-columns);\n    }\n  }\n}\n\n@mixin generate-columns-orders($number-of-columns) {\n  &--order-first {\n    order: -1;\n  }\n\n  &--order-last {\n    order: $number-of-columns + 1;\n  }\n\n  @for $i from 1 through $number-of-columns {\n    &--order-#{$i} {\n      order: $i;\n    }\n  }\n}\n\n@mixin generate-columns-offsets($number-of-columns) {\n  &--offset-none {\n    @include make-column-offset-none();\n  }\n\n  &--offset-auto {\n    @include make-column-offset-auto();\n  }\n\n  @for $i from 1 through $number-of-columns - 1 {\n    &--offset-#{$i}\\/#{$number-of-columns} {\n      @include make-column-offset($i, $number-of-columns);\n    }\n  }\n}\n","@mixin each-breakpoint($breakpoints) {\n  // $zero-value-breakpoint: get-zero-value-breakpoint($breakpoints);\n  // // убираем брейкпойнт с нулевым значением\n  // $breakpoints: map-remove($breakpoints, nth($zero-value-breakpoint, 1));\n\n  @each $breakpoint-name, $breakpoint-value in $breakpoints {\n    $breakpoint-class-infix: make-breakpoint-class-infix(\n      $breakpoint-name,\n      $breakpoint-value\n    );\n\n    @if (strip-unit($breakpoint-value) != 0) {\n      @media (min-width: $breakpoint-value) {\n        @content ($breakpoint-class-infix, $breakpoint-name, $breakpoint-value);\n      }\n    } @else {\n      @content ($breakpoint-class-infix, $breakpoint-name, $breakpoint-value);\n    }\n  }\n}\n"]}